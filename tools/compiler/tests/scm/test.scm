;; (let ((a 'd)
;;       (c 3)
;;       )
;;   c)
;; 'a
;; (+ (+ 3 4))
;; (define a 'a)
;; 'a
;; "a"
;; '(1 2 3 4)
;; '((a . b) 3 4)
;; "aab"
(define (add a b c)
  (+ a b c))
(add 3 4 5)
(display)
;; (define var 10)
;; (display (add var 4 5))
;; (if #t
;;     1
;;     3)
;; (display)
;; (cond (#f 1)
;;       (#t 2)
;;       (else 3))
;; (display '(a b))
;; (define a '(a . b))
;; (display (car a))
;; (display (cdr '(1 . 3)))
;; (define (iter lst)
;;   (display (car lst))
;;   (if (null? lst)
;;       #t
;;       (iter (cdr lst))))
;; (iter '(a b))
;; (display)
;; (dec 3)
;; (add 3 4)
;; (define (add a . b)
;;   (cons a b))
;; (set! a (add 3 4))
;; (sub 4 3)
;; (cond ((> 3 4) (add 3 4))
;;       (#t (+ 3 4)))
;; (+ 3 4 5)
;; (define (add a b)
;;   (define (iter a)
;;     a)
;;   (+ a b))
;; #\n
